Pt2)

U = [1, 7, 3, 9, 14, 0, 6, 22]       k = 3       T = 10


//We dont care about what's in the subsets, just that they add up to T and
// are a certain length. Therefore, just keep a running sum.

boolean func(U, T, k, currSize, currTotal, currIndex){
	//Subset too big for it own gotdamn feet
	if (currSize > k) return false;
	
	
	tempTotal = U[currIndex] + total;
	
	//If this total == T, we're done here
	if(tempTotal == T) return true;

	if (tempTotal > T)		//Total too big, skip to next index
		return func(U, T, k, currSize, currTotal, currIndex + 1);

	//Otherwise, total is too small, go again
	return func(U, T, k, currSize + 1, tempTotal, currIndex + 1);
}


Recurrence:

T(n) = 4 + T(n-1)



boolean callFunc(U, T, k){
	//Do basic checks...
	if(k == 0 && T == 0) return true	//{} counts
	if(k < 1) return false
	
	if(T < 0) return false
	
	return func(U, T, k, 0, 0, 0);
}


boolean func(U, T, k, currSize, currTotal, currIndex){
	if(currIndex == U.length+1) return false;
	
	newTotal = U[currIndex] + currTotal;

	//If adding this # will bring us to max size, stop here
	if(currSize+1 == k){
		if(newTotal == T)
			return true;
		return false;
	}
	
	//Split
	result1 = func(U, T, k, currSize, currTotal, currIndex + 1);
	result2 = func(U, T, k, currSize+1, newTotal, currIndex + 1);
	
	return (result1 || result2);
}

Recurrence:
 true: currSize == k && total == T
false: 


===================================================================================

Recursive: 

boolean doThing(U, T, k){
	if(T < 0 || k < 0) return false;
	return func(U, k, T, 0);
}

boolean func(U, spaceLeft, remainingSum, index){
	if(spaceLeft == 0){
		if(remainingSum == 0) return true;		//{} counts
		return false;
	}
	if(index == U.length) return false	//We have run out of numbers
	
	//If this element is too big to add, skip it
	if(U[index] > remainingSum)
		return func(U, spaceLeft, remainingSum, index+1);
		
	//Check the subsets including and excluding this element
	result1 = func(U, spaceLeft, remainingSum, index+1);
	result2 = func(U, spaceLeft-1, remainingSum - U[index], index+1);
	
	return (result1 || result2);
}


Recurrence:

func =  true: spaceLeft == 0 && remainingSum == 0
func = false: (spaceLeft == 0 && remainingSum != 0) || index == U.length

func = func(U, spaceLeft, remainingSum, index+1) ||
		func(U, spaceLeft-1, remainingSum - U[index], index+1);




Iterative: 

//Use typical subset problem's 2-D array with T/F.
//Then keep a hashmap with a list of 

//Use typical subset problem's 2-D array, but instead of just T/F in each cell,
// have a list of subset lengths that add up to that sum.

boolean iterFunc(U, T, k){
	
	n = U.length;

	//Make a 2d array to map subsets
	matrix[][] = new boolean[n][T+1];	//n, 0->T (not 1->T)
	
	//Make hashmap to keep track of the lengths of each subset that adds to a sum
	//key = current sum, value = array of subset lengths
	Hashmap legths = new HashMap<Integer, List<Integer>>();
	
	//Set column 0 to true, as all sums == 0 use empty set
	for (int i = 0; i <= n; i++){
        matrix[i][0] = true; 
	}
		
		
	//For each number in the set
	for(int i = 0; i < n; i++){
		int number = U[i];
		
		
		for(int sum = 1; sum <= T; sum++){
			
			//If this number is too big, grab the val above
			if(number > sum){
				matrix[i][sum] = matrix[i-1][sum];
			}
			else{
				//Decide if number can be added to a prev subset to fit the current sum
				//Use typical subset-sum lookback
				result1 = matrix[i - 1][sum - number];
				
				if(result){
					//We are adding this to the subset
					//Ex: if sum = 14, number = 9, and lengths@5 = [1, 3, 4],
					//lengths@14 will now = [2, 4, 5]
					lengths@sum = lengths@(sum - number)++
				}
				
				//If this number won't fit, we don't add it to the subsets, but 
				//this sum may still be possible, so the matrix should reflect that
				result2 = result || matrix[i-1][sum];
				
				matrix[i][j] = result2;
				
			}
		}
	}
	
	if(! matrix[n-1][T]) return false;
	
	//If there is a possible subset, check that there is one of length k
	list = lengths@T
	for(int i = 0; i < list.length; i++){
		if(list[i]== k) return true;
	}
	return false;
}
