#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define BUFFER_SIZE 1024

static void promptUsr(){
    printf("Prompting user...\n");
}

static void readUsr(char *buffer){
    printf("Reading user...\n");


    if(fgets(buffer, BUFFER_SIZE, stdin) != NULL){
        //Remove newline
        buffer[strcspn(buffer, "\n")] = 0;
        printf("The string is %s", buffer);
    }

    else
        printf("There was an error reading input!\n");
    //printf("%d", sizeof(buffer));

    /*
    //while(1){
        if(fgets(buffer, BUFFER_SIZE, stdin) != NULL){
            //Remove newline if present




            //buffer = strchr(buffer, '\n');   //Remove trailing newline
            printf("%s", buffer);
            printf("..\n");
        }
    //}
    */
}

/*
static int readLine(char *buffer)
{
    while (fgets(buffer, sizeof(buffer), stdin) != 0)
    {
        size_t buf_len = strlen(buffer);
        char *extra = realloc(input, buf_len + cur_len + 1);
        if (extra == 0)
            break;
        input = extra;
        strcpy(input + cur_len, buffer);
        cur_len += buf_len;
    }


    return 0;
}
*/


int main(int argc, char** argv) {
    //Grab passed parameters
    char processName[30];
    strcpy(processName, argv[0]);
    char prompt[16] = "308sh> ";
    //Shell only supports "'-p prompt'"
    if(argc == 3){

    }



    char buff[BUFFER_SIZE];

    int i;
    for(i=0; i<argc; i++)
        printf("Option %d is \"%s\"\n", i, argv[i]);

    printf("Here\n");


    while(1){

        promptUsr();
        readUsr(buff);


    }
    return 0;
}














/** Parses given array of values into options and arguments

@param argc     Count of the number of arguments contained in argv
@param argv     Values of the arguments
@return         0 for success, -1 for error
*/
int parseArgs(int argc, char **argv){

    if(DEBUG){
        debug_print("Size: %d\n",  argc);

        int i;
        for(i = 0; i < argc; i++){
            debug_print("Arg at %d: ", i);
            debug_print("%s\n", argv[i]);
        }
    }


    char allOptions[] = "p:";       //Every available option
                                    // ":x" for no args required

    int option;

    //I'm using getopt for command parsing because its just really really
    //really really really nice. Please God let this be allowed.
    while((option = getopt(argc, argv, allOptions)) != -1){

        printf("We out here\n");

        debug_print("Option: %c\n", option);
        switch(option)
        {
            case 'p':
                strcpy(prompt, optarg); //Replace prompt with provided one
                break;
            case 'c':
                printf("mmmmmmm\n");
                break;
            //-------------------------------------------------------------
            case '?':
                /* getopt() automatically prints errors for us :D
                    Gists of what it prints:

                printf("Option -%c requires an argument.\n", optopt);
                printf("Unknown option '-%c'.\n", optopt);
                printf("Unknown option character '\\x%x'.\n", optopt);
                */
                //Continue on to default's return...

            default: return -1;
                    break;
            //-------------------------------------------------------------
        }

        // optind is for the extra arguments
        // which are not parsed
        int index;
        for (index = optind; index < argc; index++)
            printf ("Non-option argument %s\n", argv[index]);

    }

    return 0;
}










/*
//Try to start a program command
pid_t child_pid;
int child_stat;
pid_t tpid;

child_pid = fork();
if(child_pid){
    if(child_pid == (pid_t)(-1)){
        printf("Fork failed.");
        return -1;
    }

    printf(">>>[%ld] %s\n", (long)child_pid, command);
    tpid = wait(&child_stat);
    printf(">>>[%ld] %s Exit %d\n", (long)tpid, command, child_stat);

    if(child_stat == 0)
        continue;
}
else{
    //char *execargs[] = {"ls", "-l", NULL};
    //execvp(execargs[0], execargs);

    printArr(argv+i, i, argc-i);
    printf("\n");

    //Send execvp the remaining arguments
    execvp((argv+i)[0], argv+i);
    //If execvp returns, command was not recognized
}

printf("Unknown command %s\n", command);
return -1;
*/









            pid_t  child;
            int    cstatus;  /* Exit status of child. */
            pid_t  c;        /* Pid of child to be returned by wait. */
            char *args[3];   /* List of arguments for the child process. */

            /* Set up arguments to run an exec in the child process.  */
            /* (This example runs the "ls" program with "-l" option.) */
            args[0] = "ls";
            args[1] = "-l";
            args[2] = NULL;   /* Indicates the end of arguments. */
            if ((child = fork()) == 0) { /* Child process. */
                printf("Child: PID of Child = %ld\n", (long) getpid());
                execvp(args[0], args); /* arg[0] has the command name. */


                /* If the child process reaches this point, then  */
                /* execvp must have failed.                       */

                fprintf(stderr, "Child process could not do execvp.\n");
                exit(1);
            }
            else { /* Parent process. */
                if (child == (pid_t)(-1)) {
                    fprintf(stderr, "Fork failed.\n");
                    exit(1);
                }
                else {
                    c = wait(&cstatus); /* Wait for child to complete. */
                    printf("Parent: Child  %ld exited with status = %d\n",(long) c, cstatus);
                }
            }
            return  0;
